import React, { useState, useEffect, useRef } from 'react';
import '../styles/chat.css';

const ChatSystem = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [userName, setUserName] = useState('');
  const [showNameInput, setShowNameInput] = useState(false);
  const messagesEndRef = useRef(null);

  // Ã–rnek yanÄ±tlar
  const responses = [
    "Merhaba, ben buradayÄ±m. Seni dinliyorum. ðŸ’œ",
    "YalnÄ±z olmadÄ±ÄŸÄ±nÄ± bilmeni istiyorum. Sen gÃ¼Ã§lÃ¼sÃ¼n.",
    "183 numaralÄ± hattÄ± arayabilirsin. 7/24 destek alabilirsin.",
    "Åžiddet hiÃ§bir ÅŸekilde kabul edilemez. Sen haklÄ±sÄ±n.",
    "GÃ¼venli bir yerde misin? Acil durumda 155'i ara.",
    "Psikolojik destek almak iÃ§in ÅžÃ–NÄ°M merkezlerine baÅŸvurabilirsin.",
    "HaklarÄ±nÄ± bilmek Ã§ok Ã¶nemli. Yasal danÄ±ÅŸmanlÄ±k alabilirsin.",
    "Sen deÄŸerlisin ve ÅŸiddetsiz bir yaÅŸamÄ± hak ediyorsun.",
    "Ã‡ocuklarÄ±n varsa onlar iÃ§in de destek alabilirsin.",
    "Ekonomik baÄŸÄ±msÄ±zlÄ±k iÃ§in meslek edindirme kurslarÄ± var."
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const newMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date().toLocaleTimeString('tr-TR', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    };

    setMessages(prev => [...prev, newMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Bot yanÄ±tÄ± simÃ¼lasyonu
    setTimeout(() => {
      const botResponse = responses[Math.floor(Math.random() * responses.length)];
      const botMessage = {
        id: Date.now() + 1,
        text: botResponse,
        sender: 'bot',
        timestamp: new Date().toLocaleTimeString('tr-TR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })
      };
      
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const startChat = () => {
    if (!userName.trim()) return;
    setShowNameInput(false);
    setIsOpen(true);
    
    // HoÅŸ geldin mesajÄ±
    const welcomeMessage = {
      id: Date.now(),
      text: `Merhaba ${userName}! Ben buradayÄ±m ve seni dinliyorum. NasÄ±l yardÄ±mcÄ± olabilirim? ðŸ’œ`,
      sender: 'bot',
      timestamp: new Date().toLocaleTimeString('tr-TR', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    };
    
    setMessages([welcomeMessage]);
  };

  const closeChat = () => {
    setIsOpen(false);
    setMessages([]);
    setShowNameInput(false);
    setUserName('');
  };

  const emergencyCall = () => {
    window.open('tel:183', '_self');
  };

  if (showNameInput) {
    return (
      <div className="chat-widget">
        <div className="chat-toggle" onClick={() => setShowNameInput(true)}>
          <span className="chat-icon">ðŸ’¬</span>
          <span className="chat-text">Destek Chat</span>
        </div>
        
        <div className="chat-name-modal">
          <div className="chat-name-content">
            <button 
              className="close-name-modal" 
              onClick={() => setShowNameInput(false)}
              aria-label="Modal'Ä± kapat"
            >
              âœ•
            </button>
            <h3>ðŸ’œ GÃ¼venli Destek Chat</h3>
            <p>Anonim olarak destek alabilirsin. Ä°sim bilginiz kaydedilmez.</p>
            <div className="name-input-group">
              <input
                type="text"
                placeholder="NasÄ±l Ã§aÄŸrÄ±lmak istersin? (Ä°steÄŸe baÄŸlÄ±)"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && startChat()}
                className="name-input"
              />
              <button onClick={startChat} className="start-chat-btn">
                Sohbete BaÅŸla
              </button>
            </div>
            <div className="emergency-info">
              <p><strong>ðŸ†˜ Acil Durum:</strong></p>
              <button onClick={emergencyCall} className="emergency-btn">
                ðŸ“ž 183 - Hemen Ara
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-widget">
      {!isOpen ? (
        <div className="chat-toggle" onClick={() => setShowNameInput(true)}>
          <span className="chat-icon">ðŸ’¬</span>
          <span className="chat-text">Destek Chat</span>
        </div>
      ) : (
        <div className="chat-container">
          <div className="chat-header">
            <div className="chat-title">
              <span className="chat-icon">ðŸ’œ</span>
              <span>GÃ¼venli Destek</span>
            </div>
            <button onClick={closeChat} className="close-chat" aria-label="Chat'i kapat">
              âœ•
            </button>
          </div>
          
          <div className="chat-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-content">
                  <p>{message.text}</p>
                  <span className="message-time">{message.timestamp}</span>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="message bot-message">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="chat-input-container">
            <div className="chat-input-group">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="MesajÄ±nÄ±zÄ± yazÄ±n..."
                className="chat-input"
                rows="2"
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim()}
                className="send-button"
                aria-label="Mesaj gÃ¶nder"
              >
                ðŸ“¤
              </button>
            </div>
            
            <div className="chat-footer">
              <button onClick={emergencyCall} className="emergency-call-btn">
                ðŸ†˜ Acil Durum: 183
              </button>
              <p className="privacy-note">
                ðŸ”’ Bu sohbet tamamen gizlidir ve kaydedilmez.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatSystem;
